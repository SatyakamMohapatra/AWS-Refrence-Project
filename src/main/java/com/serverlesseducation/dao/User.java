package com.serverlesseducation.dao;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.serverlesseducation.handler.CreateUserHandler;

@DynamoDBTable(tableName = "PLACEHOLDER_USER_TABLE_NAME")
public class User {
	
	// get the table name from env. var. set in serverless.yml
    private static final String USER_TABLE_NAME = System.getenv("DYNAMODB_USER_TABLE");
    
    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;
    
    private final Logger LOG =  LogManager.getLogger(CreateUserHandler.class);

    private String id;
    private String name;
    private String processStatus;
    private Long updatedOn;
    private Long createdOn;
    
    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }
    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBRangeKey(attributeName = "name")
    public String getName() {
        return this.name;
    }
    public void setName(String name) {
        this.name = name;
    }

    @DynamoDBAttribute(attributeName = "processStatus")
    public String getProcessStatus() {
        return this.processStatus;
    }
    public void setProcessStatus(String processStatus) {
        this.processStatus = processStatus;
    }
	
    @DynamoDBAttribute(attributeName = "createdOn")
    public Long getCreatedOn() {
		return createdOn;
	}
	public void setCreatedOn(Long createdOn) {
		this.createdOn = createdOn;
	}
	
	@DynamoDBAttribute(attributeName = "updatedOn")
	public Long getUpdatedOn() {
		return updatedOn;
	}
	public void setUpdatedOn(Long updatedOn) {
		this.updatedOn = updatedOn;
	}
	@Override
	public String toString() {
		return String.format("User [id=%s, name=%s, processStatus=%s]",this.id,this.name,this.processStatus);
	}
    
    public User() {
    	// build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(USER_TABLE_NAME))
            .build();
        // get the db adapter
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        // create the mapper with config
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
	}
    
    // methods
    public Boolean ifTableExists() {
        return this.client.describeTable(USER_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }
    
    public void save(User user) throws IOException {
        LOG.info("User - save(): " + user.toString());
        Long millis = System.currentTimeMillis();
        user.setCreatedOn(millis);
        user.setUpdatedOn(millis);
        this.mapper.save(user);
    }
    
    public List<User> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<User> results = this.mapper.scan(User.class, scanExp);
        for (User p : results) {
          LOG.info("User - list(): " + p.toString());
        }
        return results;
    }
    
    public User get(String id) throws IOException {
    	User user = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<User> queryExp = new DynamoDBQueryExpression<User>()
            .withKeyConditionExpression("id = :v1")
            .withExpressionAttributeValues(av);

        PaginatedQueryList<User> result = this.mapper.query(User.class, queryExp);
        if (result.size() > 0) {
          user = result.get(0);
          LOG.info("User - get(): user - " + user.toString());
        } else {
        	LOG.info("User - get(): user - Not Found.");
        }
        return user;
    }
    
    public Boolean delete(String id) throws IOException {
    	User user = null;

        // get user if exists
    	user = get(id);
        if (user != null) {
          LOG.info("User - delete(): " + user.toString());
          this.mapper.delete(user);
        } else {
          LOG.info("User - delete(): user - does not exist.");
          return false;
        }
        return true;
    }
    
    public Boolean update(String id, User updatedUser) throws IOException {
    	User user = null;
        // get user if exists
    	user = get(id);
        if (user != null) {
          user.setName(updatedUser.getName());
          user.setProcessStatus(updatedUser.getProcessStatus());
          user.setUpdatedOn(System.currentTimeMillis());
          LOG.info("User - update(): " + user.toString());
          this.mapper.save(user);
        } else {
          LOG.info("User - update(): user - does not exist.");
          return false;
        }
        return true;
    }
    
}
